
Real masks:
Shape:
torch.Size([12, 64, 64])
tensor([[[-1., -1., -1.,  ..., -1., -1., -1.],
         [-1., -1., -1.,  ..., -1., -1., -1.],
         [-1., -1., -1.,  ..., -1., -1., -1.],
         ...,
         [-1., -1., -1.,  ..., -1., -1., -1.],
         [-1., -1., -1.,  ..., -1., -1., -1.],
         [-1., -1., -1.,  ..., -1., -1., -1.]],

        [[-1., -1., -1.,  ..., -1., -1., -1.],
         [-1., -1., -1.,  ..., -1., -1., -1.],
         [-1., -1., -1.,  ..., -1., -1., -1.],
         ...,
         [-1., -1., -1.,  ..., -1., -1., -1.],
         [-1., -1., -1.,  ..., -1., -1., -1.],
         [-1., -1., -1.,  ..., -1., -1., -1.]],

        [[-1., -1., -1.,  ..., -1., -1., -1.],
         [-1., -1., -1.,  ..., -1., -1., -1.],
         [-1., -1., -1.,  ..., -1., -1., -1.],
         ...,
         [-1., -1., -1.,  ..., -1., -1., -1.],
         [-1., -1., -1.,  ..., -1., -1., -1.],
         [-1., -1., -1.,  ..., -1., -1., -1.]],

        ...,

        [[-1., -1., -1.,  ..., -1., -1., -1.],
         [-1., -1., -1.,  ..., -1., -1., -1.],
         [-1., -1., -1.,  ..., -1., -1., -1.],
         ...,
         [-1., -1., -1.,  ..., -1., -1., -1.],
         [-1., -1., -1.,  ..., -1., -1., -1.],
         [-1., -1., -1.,  ..., -1., -1., -1.]],

        [[-1., -1., -1.,  ..., -1., -1., -1.],
         [-1., -1., -1.,  ..., -1., -1., -1.],
         [-1., -1., -1.,  ..., -1., -1., -1.],
         ...,
         [-1., -1., -1.,  ..., -1., -1., -1.],
         [-1., -1., -1.,  ..., -1., -1., -1.],
         [-1., -1., -1.,  ..., -1., -1., -1.]],

        [[-1., -1., -1.,  ..., -1., -1., -1.],
         [-1., -1., -1.,  ..., -1., -1., -1.],
         [-1., -1., -1.,  ..., -1., -1., -1.],
         ...,
         [-1., -1., -1.,  ..., -1., -1., -1.],
         [-1., -1., -1.,  ..., -1., -1., -1.],
         [-1., -1., -1.,  ..., -1., -1., -1.]]], device='cuda:0')
Fake masks:
Shape:
torch.Size([12, 64, 64])
tensor([[[-0.0320, -0.0423, -0.0430,  ..., -0.0435, -0.0378, -0.0211],
         [-0.0457, -0.0578, -0.0591,  ..., -0.0595, -0.0505, -0.0270],
         [-0.0490, -0.0630, -0.0657,  ..., -0.0671, -0.0553, -0.0310],
         ...,
         [-0.0485, -0.0628, -0.0655,  ..., -0.0669, -0.0551, -0.0314],
         [-0.0413, -0.0529, -0.0547,  ..., -0.0559, -0.0464, -0.0261],
         [-0.0209, -0.0257, -0.0279,  ..., -0.0282, -0.0214, -0.0147]],

        [[-0.0320, -0.0423, -0.0430,  ..., -0.0435, -0.0378, -0.0211],
         [-0.0457, -0.0578, -0.0591,  ..., -0.0595, -0.0505, -0.0270],
         [-0.0490, -0.0630, -0.0657,  ..., -0.0671, -0.0553, -0.0310],
         ...,
         [-0.0485, -0.0628, -0.0655,  ..., -0.0669, -0.0551, -0.0314],
         [-0.0413, -0.0529, -0.0547,  ..., -0.0559, -0.0464, -0.0261],
         [-0.0209, -0.0257, -0.0279,  ..., -0.0282, -0.0214, -0.0147]],

        [[-0.0320, -0.0423, -0.0430,  ..., -0.0435, -0.0378, -0.0211],
         [-0.0457, -0.0578, -0.0591,  ..., -0.0595, -0.0505, -0.0270],
         [-0.0490, -0.0630, -0.0657,  ..., -0.0671, -0.0553, -0.0310],
         ...,
         [-0.0485, -0.0628, -0.0655,  ..., -0.0669, -0.0551, -0.0314],
         [-0.0413, -0.0529, -0.0547,  ..., -0.0559, -0.0464, -0.0261],
         [-0.0209, -0.0257, -0.0279,  ..., -0.0281, -0.0214, -0.0147]],

        ...,

        [[-0.0320, -0.0423, -0.0430,  ..., -0.0435, -0.0378, -0.0211],
         [-0.0457, -0.0578, -0.0591,  ..., -0.0595, -0.0505, -0.0270],
         [-0.0490, -0.0630, -0.0657,  ..., -0.0671, -0.0553, -0.0310],
         ...,
         [-0.0485, -0.0628, -0.0655,  ..., -0.0669, -0.0551, -0.0314],
         [-0.0413, -0.0529, -0.0547,  ..., -0.0559, -0.0464, -0.0261],
         [-0.0209, -0.0257, -0.0279,  ..., -0.0282, -0.0214, -0.0147]],

        [[-0.0320, -0.0423, -0.0430,  ..., -0.0435, -0.0378, -0.0211],
         [-0.0457, -0.0578, -0.0591,  ..., -0.0595, -0.0505, -0.0270],
         [-0.0490, -0.0630, -0.0657,  ..., -0.0671, -0.0553, -0.0310],
         ...,
         [-0.0485, -0.0628, -0.0655,  ..., -0.0669, -0.0551, -0.0314],
         [-0.0413, -0.0529, -0.0547,  ..., -0.0559, -0.0464, -0.0261],
         [-0.0209, -0.0257, -0.0279,  ..., -0.0282, -0.0214, -0.0147]],

        [[-0.0320, -0.0423, -0.0431,  ..., -0.0435, -0.0378, -0.0211],
         [-0.0458, -0.0577, -0.0590,  ..., -0.0594, -0.0506, -0.0269],
         [-0.0491, -0.0630, -0.0658,  ..., -0.0671, -0.0554, -0.0310],
         ...,
         [-0.0486, -0.0628, -0.0655,  ..., -0.0668, -0.0551, -0.0313],
         [-0.0414, -0.0529, -0.0547,  ..., -0.0558, -0.0463, -0.0261],
         [-0.0209, -0.0257, -0.0279,  ..., -0.0281, -0.0214, -0.0147]]],
       device='cuda:0')
Nodes:
Shape:
torch.Size([12, 18])
tensor([[0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.],
        [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.]],
       device='cuda:0')
Edges:
Shape:
torch.Size([66, 3])
tensor([[ 0, -1,  1],
        [ 0, -1,  2],
        [ 0, -1,  3],
        [ 0, -1,  4],
        [ 0,  1,  5],
        [ 0, -1,  6],
        [ 0, -1,  7],
        [ 0,  1,  8],
        [ 0, -1,  9],
        [ 0, -1, 10],
        [ 0, -1, 11],
        [ 1, -1,  2],
        [ 1, -1,  3],
        [ 1, -1,  4],
        [ 1,  1,  5],
        [ 1, -1,  6],
        [ 1,  1,  7],
        [ 1, -1,  8],
        [ 1, -1,  9],
        [ 1, -1, 10],
        [ 1, -1, 11],
        [ 2,  1,  3],
        [ 2, -1,  4],
        [ 2, -1,  5],
        [ 2,  1,  6],
        [ 2, -1,  7],
        [ 2, -1,  8],
        [ 2, -1,  9],
        [ 2, -1, 10],
        [ 2, -1, 11],
        [ 3, -1,  4],
        [ 3,  1,  5],
        [ 3,  1,  6],
        [ 3, -1,  7],
        [ 3, -1,  8],
        [ 3,  1,  9],
        [ 3, -1, 10],
        [ 3, -1, 11],
        [ 4,  1,  5],
        [ 4, -1,  6],
        [ 4, -1,  7],
        [ 4, -1,  8],
        [ 4, -1,  9],
        [ 4,  1, 10],
        [ 4, -1, 11],
        [ 5, -1,  6],
        [ 5,  1,  7],
        [ 5,  1,  8],
        [ 5,  1,  9],
        [ 5,  1, 10],
        [ 5,  1, 11],
        [ 6, -1,  7],
        [ 6, -1,  8],
        [ 6, -1,  9],
        [ 6, -1, 10],
        [ 6, -1, 11],
        [ 7, -1,  8],
        [ 7, -1,  9],
        [ 7, -1, 10],
        [ 7, -1, 11],
        [ 8, -1,  9],
        [ 8, -1, 10],
        [ 8, -1, 11],
        [ 9, -1, 10],
        [ 9, -1, 11],
        [10, -1, 11]], device='cuda:0')
Node_to_samples:
Shape:
torch.Size([12])
tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
Edge_to_samples:
None
Data parallel..:
None